// Generated by CoffeeScript 1.12.6
(function() {
  var MaxRects, PORT, app, debuglog, express, path;

  debuglog = require("debug")("server");

  express = require('express');

  path = require("path");

  MaxRects = require("./maxrects").MaxRects;

  PORT = 3677;

  app = express();

  app.set('view options', {
    doctype: 'html'
  });

  app.set('views', __dirname + '/views');

  app.set('title', 'MaxRects');

  app.use(express.favicon());

  app.use(app.router);

  app.use(express["static"](path.join(__dirname, "../public")));

  app.use(express.bodyParser());

  app.get('/', function(req, res) {
    res.redirect("/index.html");
  });

  app.post('/calc', express.bodyParser(), function(req, res) {
    var err, isMulti, rects;
    console.log("[index::on /calc] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
    rects = req.body.rects;
    if (!(Array.isArray(rects) && rects.length > 0)) {
      return res.json({
        success: false,
        msg: 'missing rects'
      });
    }
    try {
      isMulti = false;
      if (req.body.is_multi === true || req.body.is_multi === "true") {
        isMulti = true;
      }
      debuglog("[server] Boolean(req.body.is_multi):" + (Boolean(req.body.is_multi)) + ", req.body.is_multi:" + req.body.is_multi + ", isMulti:" + isMulti);
      (new MaxRects(req.body.margin, req.body.padding, isMulti)).calc(rects, function(err, results) {
        if (err != null) {
          return res.json({
            success: false,
            msg: err.toString()
          });
        } else {
          return res.json({
            success: true,
            results: results
          });
        }
      });
    } catch (error) {
      err = error;
      return res.json({
        success: false,
        msg: err.toString()
      });
    }
  });

  app.listen(PORT);

  console.log("maxrects service start at port:" + PORT);

}).call(this);
